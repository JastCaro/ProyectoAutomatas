#librerias
from automata.pda.dpda import DPDA

def proy():
    return DPDA(
        states={'q0', 'q1', 'q2', 'q3', 'q4', 'q5'},
        input_symbols={'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/'},
        stack_symbols={'Z', 'N'},
        transitions={
            'q0': {
                '+': {'Z': ('q3', ('Z',))},
                '-': {'Z': ('q3', ('Z',))},
                '0': {'Z': ('q2', ('N', 'Z'))},
                '1': {'Z': ('q2', ('N', 'Z'))},
                '2': {'Z': ('q2', ('N', 'Z'))},
                '3': {'Z': ('q2', ('N', 'Z'))},
                '4': {'Z': ('q2', ('N', 'Z'))},
                '5': {'Z': ('q2', ('N', 'Z'))},
                '6': {'Z': ('q2', ('N', 'Z'))},
                '7': {'Z': ('q2', ('N', 'Z'))},
                '8': {'Z': ('q2', ('N', 'Z'))},
                '9': {'Z': ('q2', ('N', 'Z'))}
            },
            'q2': {
                '+': {'N': ('q3', ('N',))},
                '-': {'N': ('q3', ('N',))},
                '*': {'N': ('q3', ('N',))},
                '0': {'N': ('q2', ('N',))},
                '1': {'N': ('q2', ('N',))},
                '2': {'N': ('q2', ('N',))},
                '3': {'N': ('q2', ('N',))},
                '4': {'N': ('q2', ('N',))},
                '5': {'N': ('q2', ('N',))},
                '6': {'N': ('q2', ('N',))},
                '7': {'N': ('q2', ('N',))},
                '8': {'N': ('q2', ('N',))},
                '9': {'N': ('q2', ('N',))},
                '/': {'N': ('q4', ('N',))}
            },
            'q3': {
                '0': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '1': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '2': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '3': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '4': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '5': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '6': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '7': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '8': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '9': {'Z': ('q2', ('N', 'Z')), 'N': ('q2', ('N',))},
                '*': {'N': ('q4', ('N',))},
                '/': {'N': ('q4', ('N',))},
                '+': {'Z': ('q3', ('Z',)), 'N': ('q3', ('N',))},
                '-': {'Z': ('q3', ('Z',)), 'N': ('q3', ('N',))}
            },
            'q4': {
                '0': {'N': ('q5', ('N',))},
                '1': {'N': ('q2', ('N',))},
                '2': {'N': ('q2', ('N',))},
                '3': {'N': ('q2', ('N',))},
                '4': {'N': ('q2', ('N',))},
                '5': {'N': ('q2', ('N',))},
                '6': {'N': ('q2', ('N',))},
                '7': {'N': ('q2', ('N',))},
                '8': {'N': ('q2', ('N',))},
                '9': {'N': ('q2', ('N',))},
                '+': {'N': ('q4', ('N',))},
                '-': {'N': ('q4', ('N',))}
            },
            'q5': {
                '0': {'N': ('q5', ('N',))},
                '1': {'N': ('q2', ('N',))},
                '2': {'N': ('q2', ('N',))},
                '3': {'N': ('q2', ('N',))},
                '4': {'N': ('q2', ('N',))},
                '5': {'N': ('q2', ('N',))},
                '6': {'N': ('q2', ('N',))},
                '7': {'N': ('q2', ('N',))},
                '8': {'N': ('q2', ('N',))},
                '9': {'N': ('q2', ('N',))}
            }

        },
        initial_state='q0',
        initial_stack_symbol='Z',
        final_states={'q2'}
    )

def calificador():
    automata = proy()
    def checker(string, d):
        try:
            d.validate_input(string, step=False)
            return True
        except Exception as e:
            print("Expresión inválida.")
            return False

    # Testear
    expresion = input("Ingresa la expresión que se va a revisar: ")
    return checker(expresion, automata)

if calificador() == True:
    print("Expresión válida.")